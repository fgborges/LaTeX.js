// Generated by LiveScript 1.6.0
(function(){
  'use strict';
  var he, Textcomp, out$ = typeof exports != 'undefined' && exports || this;
  he = require('he');
  out$.Textcomp = Textcomp = (function(){
    Textcomp.displayName = 'Textcomp';
    var args, symbols, prototype = Textcomp.prototype, constructor = Textcomp;
    args = Textcomp.args = {};
    function Textcomp(generator, options){}
    symbols = Textcomp.symbols = new Map([['textcentoldstyle', '\uF7A2'], ['textdollaroldstyle', '\uF724'], ['textguarani', '\u20B2'], ['textcopyleft', '\u1F12F'], ['textzerooldstyle', '\uF730'], ['textoneoldstyle', '\uF731'], ['texttwooldstyle', '\uF732'], ['textthreeoldstyle', '\uF733'], ['textfouroldstyle', '\uF734'], ['textfiveoldstyle', '\uF735'], ['textsixoldstyle', '\uF736'], ['textsevenoldstyle', '\uF737'], ['texteightoldstyle', '\uF738'], ['textnineoldstyle', '\uF739'], ['textborn', '\u2B51'], ['textdied', he.decode('&dagger;')], ['textpilcrow', he.decode('&para;')], ['textdblhyphen', '\u2E40']]);
    return Textcomp;
  }());
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWNrYWdlcy90ZXh0Y29tcC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztFQUFBOztFQUVTLEVBQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLElBQUE7a0JBRUksWUFBTixRQUFBLENBQUE7OztJQUVILElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUU7SUFHZixRQUFBLENBQUEsUUFBQSxDQUFBLFNBQUEsRUFBQSxPQUFBO0lBR0EsT0FBUSxDQUFBLENBQUEsQ0FBRSxRQUFDLENBQUEsT0FBUSxDQUFBLENBQUEsS0FBTSxJQUFJLEVBRXZCLG9CQUFzQixZQUN0QixzQkFBc0IsWUFDdEIsZUFBc0IsWUFHdEIsZ0JBQXNCLGFBR3RCLG9CQUFzQixZQUN0QixtQkFBc0IsWUFDdEIsbUJBQXNCLFlBQ3RCLHFCQUFzQixZQUN0QixvQkFBc0IsWUFDdEIsb0JBQXNCLFlBQ3RCLG1CQUFzQixZQUN0QixxQkFBc0IsWUFDdEIscUJBQXNCLFlBQ3RCLG9CQUFzQixZQUd0QixZQUFzQixZQUN0QixZQUFzQixFQUFFLENBQUMsT0FBTyxVQUFBLEtBSWhDLGVBQXNCLEVBQUUsQ0FBQyxPQUFPLFFBQUEsS0FDaEMsaUJBQXNCLFNBNUJDLENBQUQiLCJmaWxlIjoidGV4dGNvbXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxucmVxdWlyZSEgaGVcblxuZXhwb3J0IGNsYXNzIFRleHRjb21wXG5cbiAgICBhcmdzID0gQGFyZ3MgPSB7fVxuXG4gICAgIyBDVE9SXG4gICAgKGdlbmVyYXRvciwgb3B0aW9ucykgLT5cblxuXG4gICAgc3ltYm9scyA9IEBzeW1ib2xzID0gbmV3IE1hcChbXG4gICAgICAgICMgY3VycmVuY2llc1xuICAgICAgICAqIFxcdGV4dGNlbnRvbGRzdHlsZSAgICAgJ1xcdUY3QTInICAgICAgICAgICAgICAgICMg756iXG4gICAgICAgICogXFx0ZXh0ZG9sbGFyb2xkc3R5bGUgICAnXFx1RjcyNCcgICAgICAgICAgICAgICAgIyDvnKRcbiAgICAgICAgKiBcXHRleHRndWFyYW5pICAgICAgICAgICdcXHUyMEIyJyAgICAgICAgICAgICAgICAjIOKCslxuXG4gICAgICAgICMgbGVnYWwgc3ltYm9sc1xuICAgICAgICAqIFxcdGV4dGNvcHlsZWZ0ICAgICAgICAgJ1xcdTFGMTJGJ1xuXG4gICAgICAgICMgb2xkIHN0eWxlIG51bWVyYWxzXG4gICAgICAgICogXFx0ZXh0emVyb29sZHN0eWxlICAgICAnXFx1RjczMCcgICAgICAgICAgICAgICAgIyDvnLBcbiAgICAgICAgKiBcXHRleHRvbmVvbGRzdHlsZSAgICAgICdcXHVGNzMxJyAgICAgICAgICAgICAgICAjIO+csVxuICAgICAgICAqIFxcdGV4dHR3b29sZHN0eWxlICAgICAgJ1xcdUY3MzInICAgICAgICAgICAgICAgICMg75yyXG4gICAgICAgICogXFx0ZXh0dGhyZWVvbGRzdHlsZSAgICAnXFx1RjczMycgICAgICAgICAgICAgICAgIyDvnLNcbiAgICAgICAgKiBcXHRleHRmb3Vyb2xkc3R5bGUgICAgICdcXHVGNzM0JyAgICAgICAgICAgICAgICAjIO+ctFxuICAgICAgICAqIFxcdGV4dGZpdmVvbGRzdHlsZSAgICAgJ1xcdUY3MzUnICAgICAgICAgICAgICAgICMg75y1XG4gICAgICAgICogXFx0ZXh0c2l4b2xkc3R5bGUgICAgICAnXFx1RjczNicgICAgICAgICAgICAgICAgIyDvnLZcbiAgICAgICAgKiBcXHRleHRzZXZlbm9sZHN0eWxlICAgICdcXHVGNzM3JyAgICAgICAgICAgICAgICAjIO+ct1xuICAgICAgICAqIFxcdGV4dGVpZ2h0b2xkc3R5bGUgICAgJ1xcdUY3MzgnICAgICAgICAgICAgICAgICMg75y4XG4gICAgICAgICogXFx0ZXh0bmluZW9sZHN0eWxlICAgICAnXFx1RjczOScgICAgICAgICAgICAgICAgIyDvnLlcblxuICAgICAgICAjIGdlbmVhbG9naWNhbFxuICAgICAgICAqIFxcdGV4dGJvcm4gICAgICAgICAgICAgJ1xcdTJCNTEnICAgICAgICAgICAgICAgICMg4q2RICAgICAgICAgICAgIChhbHRlcm5hdGl2ZXM6IFUrMDAyQSwgVSsyNjA1LCBVKzI3MzYpXG4gICAgICAgICogXFx0ZXh0ZGllZCAgICAgICAgICAgICBoZS5kZWNvZGUgJyZkYWdnZXI7JyAgICAjIOKAoCAgIFUrMjAyMCAgICAoYWx0ZXJuYXRpdmU6IFUrMjcxRClcbiAgICAgICAgIyAqIFxcdGV4dGxlYWYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVE9ET1xuXG4gICAgICAgICMgbWlzY1xuICAgICAgICAqIFxcdGV4dHBpbGNyb3cgICAgICAgICAgaGUuZGVjb2RlICcmcGFyYTsnICAgICAgIyDCtiAgIFUrMDBCNlxuICAgICAgICAqIFxcdGV4dGRibGh5cGhlbiAgICAgICAgJ1xcdTJFNDAnICAgICAgICAgICAgICAgICMg4rmAXG5cblxuICAgICAgICAjIFRPRE9cbiAgICAgICAgIyAqIFxcdGV4dGRibGh5cGhlbmNoYXJcblxuICAgICAgICAjICogXFx0ZXh0Y2FwaXRhbGNvbXB3b3JkbWFya1xuICAgICAgICAjICogXFx0ZXh0YXNjZW5kZXJjb21wd29yZG1hcmtcbiAgICAgICAgIyAqIFxcdGV4dHF1b3Rlc3RyYWlnaHRiYXNlXG4gICAgICAgICMgKiBcXHRleHRxdW90ZXN0cmFpZ2h0ZGJsYmFzZVxuICAgICAgICAjICogXFx0ZXh0dGhyZWVxdWFydGVyc2VtZGFzaFxuICAgICAgICAjICogXFx0ZXh0dHdlbHZldWRhc2hcbiAgICAgICAgIyAqIFxcY2FwaXRhbHRpZVxuICAgICAgICAjICogXFxuZXd0aWVcbiAgICAgICAgIyAqIFxcY2FwaXRhbG5ld3RpZVxuICAgICAgICAjICogXFxjYXBpdGFsZ3JhdmVcbiAgICAgICAgIyAqIFxcY2FwaXRhbGFjdXRlXG4gICAgICAgICMgKiBcXGNhcGl0YWxjaXJjdW1mbGV4XG4gICAgICAgICMgKiBcXGNhcGl0YWx0aWxkZVxuICAgICAgICAjICogXFxjYXBpdGFsZGllcmVzaXNcbiAgICAgICAgIyAqIFxcY2FwaXRhbGh1bmdhcnVtbGF1dFxuICAgICAgICAjICogXFxjYXBpdGFscmluZ1xuICAgICAgICAjICogXFxjYXBpdGFsY2Fyb25cbiAgICAgICAgIyAqIFxcY2FwaXRhbGJyZXZlXG4gICAgICAgICMgKiBcXGNhcGl0YWxtYWNyb25cbiAgICAgICAgIyAqIFxcY2FwaXRhbGRvdGFjY2VudFxuICAgICAgICAjICogXFxjYXBpdGFsY2VkaWxsYVxuICAgICAgICAjICogXFxjYXBpdGFsb2dvbmVrXG5cbiAgICAgICAgIyBhbGwgdGhlIG90aGVyIHN5bWJvbHMgYXJlIGFscmVhZHkgZGVmaW5lZCBieSB0dWVuYy5kZWZcbiAgICBdKVxuIl19
